#!/usr/bin/env python

import argparse
import sys


class AENET(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='aenet command launcher',
            usage='''aenet <command> [<args>]''')
        parser.add_argument('command', help='Subcommand to run')
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    def show(self):
        parser = argparse.ArgumentParser(
            description='summarize things')
        args = parser.parse_args(sys.argv[2:])

        print(f'Show {args}')


    def generate(self):
        parser = argparse.ArgumentParser(
            description='Run generate.x')
        # prefixing the argument with -- means it's optional
        parser.add_argument('--restart', action='store_true')
        parser.add_argument('--input', action='store_true', default='generate.in')
        parser.add_argument('--output', action='store_true', default='generate.out')
        # now that we're inside a subcommand, ignore the first
        # TWO argvs, ie the command (aenet) and the subcommand (train)
        args = parser.parse_args(sys.argv[2:])
        print(f'Running generate.x, {args}')

    def train(self):
        parser = argparse.ArgumentParser(
            description='Run train.x')
        # prefixing the argument with -- means it's optional
        parser.add_argument('--restart', action='store_true')
        parser.add_argument('--input', action='store_true', default='train.in')
        parser.add_argument('--output', action='store_true', default='train.out')
        # now that we're inside a subcommand, ignore the first
        # TWO argvs, ie the command (aenet) and the subcommand (train)
        args = parser.parse_args(sys.argv[2:])
        print(f'Running train.x, {args}')

    def plot(self):
        parser = argparse.ArgumentParser(
            description='Plot various quantities')
        # NOT prefixing the argument with -- means it's not optional
        parser.add_argument('type', help='Type of plotting: parity, errors, convergence')
        parser.add_argument('--output')

        args = parser.parse_args(sys.argv[2:])

        print(f'Plotting {args.type} to {args.output}')



if __name__ == '__main__':
    AENET()
